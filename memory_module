`timescale 1ns / 1ps
module memory_unit(
    input logic clk,
    input logic rst,
    input logic mem_read,
    input logic mem_write,
    input logic [31:0] pc,
    input logic [4:0] write_data,
    output logic [4:0] read_data,
    output logic [4:0] memory [31:0]
);
    logic [1:0] byte_enable = 2'b11;
    integer i;

    // Memory initialization with reset
    always_comb begin
        if (rst) begin
            for (i = 0; i < 32; i = i + 1) begin
                memory[i] <= 5'b00000; // Initialize all 5 bits
            end
        end
    end

    // Memory read operation
   always_comb begin
   // always_ff @(posedge clk) begin
        if (mem_read) begin
            case (byte_enable)
                2'b00: read_data <= {3'b000, memory[pc[9:2]][2:0]}; // Adjusted for 5-bit width
                2'b01: read_data <= {1'b0, memory[pc[9:2]][4:1]};
                default: read_data <= memory[pc[9:2]];
            endcase
        end
    end

    // Memory write operation
    always_comb begin
    //always_ff @(posedge clk) begin
        if (mem_write) begin
            case (byte_enable)
                2'b00: memory[pc[9:2]][2:0] <= write_data[2:0];
                2'b01: memory[pc[9:2]][4:1] <= write_data[4:1];
                default: memory[pc[9:2]] <= write_data;
            endcase
        end
    end
endmodule
